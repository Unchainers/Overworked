type Access = variant { Read; Write; Public; Delete; Admin; Removed; Owner };
type Account = record {
  id : text;
  updated_at : opt text;
  blocked : vec record { text; text };
  echos : vec text;
  created_at : text;
  user_id : principal;
  private : bool;
  deleted_at : opt text;
  posts : vec text;
  followers : vec record { text; text };
  following : vec record { text; text };
  profile : AccountProfile;
};
type AccountCreationPayload = record {
  private : bool;
  profile : AccountProfileCreationPayload;
};
type AccountDeletionPayload = record { account_id : text };
type AccountDetails = record {
  owned : bool;
  account : Account;
  posts : opt vec Post;
};
type AccountProfile = record {
  about : opt text;
  username : text;
  profile_picture : opt text;
};
type AccountProfileCreationPayload = record {
  about : text;
  username : text;
  profile_picture_id : opt text;
};
type AccountVisibleInformation = record {
  id : text;
  about : opt text;
  username : text;
  profile_picture : opt StoredFile;
  post_count : opt nat64;
  followers : opt vec record { text; text };
  following : opt vec record { text; text };
};
type Comment = record {
  id : text;
  updated_at : text;
  post_id : text;
  created_at : text;
  comment : text;
  poster_id : text;
  replied_to : opt text;
};
type Echo = record {
  id : text;
  account_id : text;
  media : blob;
  like : nat64;
  created_at : text;
  share : nat64;
  seen_by : vec record { text; text };
};
type EchoBriefInformation = record {
  seen : bool;
  echos : vec text;
  account : AccountVisibleInformation;
};
type FeedPost = record {
  id : text;
  title : text;
  updated_at : text;
  shares : vec text;
  created_at : text;
  likes : vec text;
  caption : text;
  comments : vec Comment;
  poster : AccountVisibleInformation;
  medias : vec StoredFile;
};
type Group = record {
  id : text;
  members : vec record { principal; Access };
  owner : principal;
  name : text;
  public : bool;
};
type PaginatorResponse = record {
  data : vec FeedPost;
  total_data : nat64;
  curr_page : nat64;
};
type Post = record {
  id : text;
  title : text;
  updated_at : text;
  shares : vec text;
  created_at : text;
  likes : vec text;
  poster_id : text;
  caption : text;
  comments : vec Comment;
  medias : vec text;
};
type Report = record {
  id : text;
  resolved : vec record { ReportResolveType; opt nat64; text };
  report_type : vec ReportType;
  created_at : text;
  reported_id : text;
  reporter_id : text;
};
type ReportResolveType = variant {
  ACCOUNTSUSPENDED;
  ACCOUNTDELETED;
  FALSE;
  WARNING;
  USERSUSPENDED;
  USERDELETED;
};
type ReportType = variant {
  HATESPEECH;
  SCAM;
  SPAM;
  RACISM;
  TERRORISM;
  PROFANITY;
};
type StoredFile = record {
  id : text;
  groups : vec Group;
  owner : principal;
  data : blob;
  name : text;
  size : nat64;
  mime_type : text;
  public : bool;
  allowed_users : vec record { principal; Access };
  uploaded_at : opt text;
};
type UserAccount = record {
  id : text;
  updated_at : opt text;
  blocked : vec record { text; text };
  echos : vec text;
  created_at : text;
  user_id : principal;
  private : bool;
  deleted_at : opt text;
  posts : vec text;
  followers : vec record { text; text };
  following : vec record { text; text };
  profile : UserAccountProfile;
};
type UserAccountProfile = record {
  username : text;
  profile_picture : opt StoredFile;
};
type ValidityCheckingPayload = record { username : text };
service : {
  accept_follow_request : (text, text) -> ();
  block_account : (text, text) -> ();
  check_validity : (ValidityCheckingPayload) -> (bool) query;
  comment_post : (text, text, Comment) -> ();
  create_account : (AccountCreationPayload) -> (Account);
  create_post : (text, Post) -> ();
  delete_account : (AccountDeletionPayload) -> ();
  follow : (text, text) -> ();
  get_account : (text, principal) -> (opt UserAccount);
  get_account_details : (text, text) -> (opt AccountDetails) query;
  get_echo : () -> () query;
  get_echos : (principal, text) -> (opt vec EchoBriefInformation);
  get_feeds : (text, nat64, principal) -> (PaginatorResponse);
  get_followers : (principal, text, text) -> (
      opt vec AccountVisibleInformation,
    );
  get_following : (principal, text, text) -> (
      opt vec AccountVisibleInformation,
    );
  get_posts : (text) -> (vec Post) query;
  get_profile : (text) -> (opt AccountProfile) query;
  get_user_accounts : (principal) -> (vec AccountVisibleInformation);
  like_post : (text, text) -> ();
  post_echo : (text, Echo) -> ();
  remove_comment : (text, text, text) -> ();
  report_account : (Report) -> ();
  unblock_account : (text, text) -> ();
  unfollow : (text, text) -> (float32);
  verify_login : (text) -> (bool) query;
}
