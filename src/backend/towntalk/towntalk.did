type Account = record {
  id : text;
  blocked : vec record { text; text };
  echos : vec text;
  user_id : principal;
  private : bool;
  deleted_at : opt text;
  posts : vec text;
  followers : vec record { text; text };
  following : vec record { text; text };
  profile : AccountProfile;
};
type AccountCreationPayload = record { account : Account };
type AccountDeletionPayload = record { account_id : text };
type AccountDetails = record {
  owned : bool;
  account : Account;
  posts : opt vec Post;
};
type AccountProfile = record { username : text; profile_picture : text };
type AccountVisibleInformation = record {
  id : text;
  username : text;
  profile_picture : text;
};
type Comment = record {
  id : text;
  updated_at : text;
  post_id : text;
  created_at : text;
  comment : text;
  poster_id : text;
  replied_to : opt text;
};
type Echo = record {
  id : text;
  account_id : text;
  media : blob;
  like : nat64;
  created_at : text;
  share : nat64;
  seen_by : vec record { text; text };
};
type EchoBriefInformation = record {
  seen : bool;
  echos : vec text;
  account : AccountVisibleInformation;
};
type Post = record {
  id : text;
  account_id : text;
  title : text;
  updated_at : text;
  shares : vec text;
  created_at : text;
  likes : vec text;
  caption : text;
  comments : vec Comment;
  medias : blob;
};
type Report = record {
  id : text;
  resolved : vec record { ReportResolveType; opt nat64; text };
  report_type : vec ReportType;
  created_at : text;
  reported_id : text;
  reporter_id : text;
};
type ReportResolveType = variant {
  ACCOUNTSUSPENDED;
  ACCOUNTDELETED;
  FALSE;
  WARNING;
  USERSUSPENDED;
  USERDELETED;
};
type ReportType = variant {
  HATESPEECH;
  SCAM;
  SPAM;
  RACISM;
  TERRORISM;
  PROFANITY;
};
service : {
  accept_follow_request : (text, text) -> ();
  block_account : (text, text) -> ();
  comment_post : (text, text, Comment) -> ();
  create_account : (AccountCreationPayload) -> ();
  create_post : (text, Post) -> ();
  delete_account : (AccountDeletionPayload) -> ();
  follow : (text, text) -> ();
  get_account_details : (text, text) -> (opt AccountDetails) query;
  get_echo : () -> () query;
  get_echos : (text) -> (opt vec EchoBriefInformation) query;
  get_followers : (text, text) -> (opt vec AccountVisibleInformation) query;
  get_following : (text, text) -> (opt vec AccountVisibleInformation) query;
  get_posts : (text) -> (vec Post) query;
  get_profile : (text) -> (opt AccountProfile) query;
  like_post : (text, text) -> ();
  post_echo : (text, Echo) -> ();
  remove_comment : (text, text, text) -> ();
  report_account : (Report) -> ();
  unblock_account : (text, text) -> ();
  unfollow : (text, text) -> (float32);
}
