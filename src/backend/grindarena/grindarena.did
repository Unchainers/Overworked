type Access = variant { Read; Write; Public; Delete; Admin; Removed; Owner };
type Account = record {
  id : text;
  updated_at : opt text;
  username : text;
  profile_picture : opt text;
  created_at : text;
  user_id : principal;
  deleted_at : opt text;
};
type AccountVisibleInformation = record {
  id : text;
  username : text;
  profile_picture : opt StoredFile;
};
type CompetitionBriefInformation = record {
  id : text;
  status : text;
  title : text;
  time_left : text;
  difficulty : Difficulty;
  description : text;
  category : text;
  prize : nat64;
  ended_at : text;
  rules : vec text;
  started_at : text;
  participant_count : nat64;
};
type Coordinator = record {
  id : text;
  account_id : text;
  competition_id : text;
};
type CreateAccountInput = record {
  username : text;
  profile_picture_id : opt text;
};
type CreateCompetitionInput = record {
  status : text;
  title : text;
  difficulty : Difficulty;
  description : text;
  category : text;
  prize : nat64;
  ended_at : text;
  rules : vec text;
  started_at : text;
};
type CreateCoordinatorInput = record {
  account_id : text;
  competition_id : text;
};
type CreateSubmissionInput = record { content : text; participant_id : text };
type Difficulty = variant { Beginner; Advanced; Intermediate };
type Group = record {
  id : text;
  members : vec record { principal; Access };
  owner : principal;
  name : text;
  public : bool;
};
type Participant = record {
  id : text;
  account_id : text;
  score : opt nat64;
  competition_id : text;
};
type StoredFile = record {
  id : text;
  groups : vec Group;
  owner : principal;
  data : blob;
  name : text;
  size : nat64;
  mime_type : text;
  public : bool;
  allowed_users : vec record { principal; Access };
  uploaded_at : opt text;
};
type Submission = record {
  id : text;
  participant_id : text;
  submitted_at : opt text;
};
service : {
  account_seeders : () -> ();
  competition_seeders : () -> ();
  coordinator_seeders : () -> ();
  create_account : (CreateAccountInput) -> (text);
  create_competition : (CreateCompetitionInput) -> (text);
  create_coordinator : (CreateCoordinatorInput) -> (text);
  create_participant : (CreateCoordinatorInput) -> (text);
  create_submission : (CreateSubmissionInput) -> (text);
  get_all_accounts : () -> (vec Account) query;
  get_all_competitions : () -> (vec CompetitionBriefInformation) query;
  get_all_coordinators : (text) -> (vec Coordinator) query;
  get_all_participants : (text) -> (vec Participant) query;
  get_all_submissions : (text) -> (vec Submission) query;
  get_user_accounts : (principal) -> (vec AccountVisibleInformation) query;
  participant_seeders : () -> ();
  seeder_all : () -> ();
  submission_seeders : () -> ();
  verify_login : (text) -> (bool);
}
